

# better name for 'set':  declare?   kwargs?  name='input', doc="whee docs", default=2)
self.inputs.set("input","aye", 2)


# brackets illegal, .val unnecessary
a = self.params["factor"].val


# better unit testing


# pickle the graph:  store, reload, use a plasm as a single black box


plasm = somemodule.makeplasm()
f = open("my.plasm", 'w')
plasm.write(f)
f.close()

# f contains types, parameter values (so that you can make instances),
  connections


# compound modules:   configure() may change *internal* graph structure,
                      when it returns the graph has to be happy, or exception is thrown




# subgraphs?  enforce invariants between parameters, ensure graph is
  connected...  information hiding..


# cpp syntax for tendrils

# use cases...

# Parallelization considerations are important.
# In a DAG there may be two forms of parallelism.
    * independent paths in the graph may be executed in parrallel,
      due to the observation that the data flow in one path is not dependent on the
      data in another path, and so nodes do not need to wait for data to be processed.
    * A DAG may also be run in parallel by queuing data to be run, and then spawning a separate thread for
      each set of input data.  This assumes that input data is available before the previous data set has been fully processed.

# To enable parallelism, without locking, in the most simple of ways include the following constraints:
    * input,output, and parameters, must be separable from the module, so that there may be one independent set of data per graph execution
	* input data must be const
	* output data may only be modified from within the process function call
	* the process function call should not mutate the module (however this adds quite a bit of annoyance to the user)
	  *this is unacceptable, so this will be solved by guaranteeing that all calls to process are atomic

	  
//void face_detector_interface(tendrils& in, tendrils&out)
//{
//  in.declare<cv::Mat>("image");
//  in.declare<cv::Mat>("mask");
//  out.declare<cv::Face>("faces");
//}
//
//#include <ecto/opencv/facedetector.hpp>
//
//struct MyFaceDetector
//{
//  typedef cv::face_detector params;
//  typedef cv::face_detector io;
//
//};

  void set_n(int n)
  {
    n_ = n;
  }
  void register_db_name(std::string name)
  {
    //expensive
  }
  void configure(tendrils& parameters)
  {
    n_ = parameters.get<int> ("n");
    parameters.at("n").set_callback(boost::bind(&Gather::set_n,this,_1)).min(20).max(40);
    parameters.at("expensive").set_callback(boost::bind(&Gather::register_db_name,this,_1));
  }
