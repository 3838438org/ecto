<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="streambuf_8hpp" kind="file" language="C++">
    <compoundname>streambuf.hpp</compoundname>
    <includes local="no">boost/python/object.hpp</includes>
    <includes local="no">boost/python/str.hpp</includes>
    <includes local="no">boost/python/extract.hpp</includes>
    <includes local="no">boost/optional.hpp</includes>
    <includes local="no">boost/utility/typed_in_place_factory.hpp</includes>
    <includes local="no">streambuf</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1477">
        <label>boost/python/object.hpp</label>
      </node>
      <node id="1478">
        <label>boost/python/str.hpp</label>
      </node>
      <node id="1481">
        <label>boost/utility/typed_in_place_factory.hpp</label>
      </node>
      <node id="1476">
        <label>/home/vrabaud/workspace/recognition_kitchen/src/ecto/include/ecto/python/streambuf.hpp</label>
        <link refid="streambuf.hpp"/>
        <childnode refid="1477" relation="include">
        </childnode>
        <childnode refid="1478" relation="include">
        </childnode>
        <childnode refid="1479" relation="include">
        </childnode>
        <childnode refid="1480" relation="include">
        </childnode>
        <childnode refid="1481" relation="include">
        </childnode>
        <childnode refid="1482" relation="include">
        </childnode>
        <childnode refid="1483" relation="include">
        </childnode>
      </node>
      <node id="1482">
        <label>streambuf</label>
      </node>
      <node id="1479">
        <label>boost/python/extract.hpp</label>
      </node>
      <node id="1483">
        <label>iostream</label>
      </node>
      <node id="1480">
        <label>boost/optional.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classecto_1_1py_1_1streambuf" prot="public">ecto::py::streambuf</innerclass>
    <innerclass refid="classecto_1_1py_1_1streambuf_1_1istream" prot="public">ecto::py::streambuf::istream</innerclass>
    <innerclass refid="classecto_1_1py_1_1streambuf_1_1ostream" prot="public">ecto::py::streambuf::ostream</innerclass>
    <innerclass refid="structecto_1_1py_1_1streambuf__capsule" prot="public">ecto::py::streambuf_capsule</innerclass>
    <innerclass refid="structecto_1_1py_1_1ostream" prot="public">ecto::py::ostream</innerclass>
    <innerclass refid="structecto_1_1py_1_1istream" prot="public">ecto::py::istream</innerclass>
    <innernamespace refid="namespaceecto">ecto</innernamespace>
    <innernamespace refid="namespaceecto_1_1py">ecto::py</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="streambuf_8hpp_1ae20ff583f662ecd38dd6e3d54cbb725c" prot="public" static="no">
        <name>TBXX_ASSERT</name>
        <param><defname>condition</defname></param>
        <initializer>if (!(condition)) { \
    throw std::runtime_error( \
      file_and_line_as_string( \
        __FILE__, __LINE__) \
      + &quot;: ASSERT(&quot; #condition &quot;) failure.&quot;); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vrabaud/workspace/recognition_kitchen/src/ecto/include/ecto/python/streambuf.hpp" line="176" column="9" bodyfile="/home/vrabaud/workspace/recognition_kitchen/src/ecto/include/ecto/python/streambuf.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="streambuf_8hpp_1a9b90c8175ab5fb075139b947c67935ff" prot="public" static="no">
        <name>TBXX_UNREACHABLE_ERROR</name>
        <param></param>
        <initializer>std::runtime_error( \
    &quot;Control flow passes through branch that should be unreachable: &quot; \
    + file_and_line_as_string(__FILE__, __LINE__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vrabaud/workspace/recognition_kitchen/src/ecto/include/ecto/python/streambuf.hpp" line="184" column="9" bodyfile="/home/vrabaud/workspace/recognition_kitchen/src/ecto/include/ecto/python/streambuf.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Willow<sp/>Garage<sp/>BSD<sp/>License<sp/>not<sp/>applicable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>original<sp/>source<sp/>from<sp/>http://cci.lbl.gov/cctbx_sources/boost_adaptbx/python_streambuf.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>original<sp/>license</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//***<sp/>Copyright<sp/>Notice<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//cctbx<sp/>Copyright<sp/>(c)<sp/>2006,<sp/>The<sp/>Regents<sp/>of<sp/>the<sp/>University<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//California,<sp/>through<sp/>Lawrence<sp/>Berkeley<sp/>National<sp/>Laboratory<sp/>(subject<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//receipt<sp/>of<sp/>any<sp/>required<sp/>approvals<sp/>from<sp/>the<sp/>U.S.<sp/>Dept.<sp/>of<sp/>Energy).<sp/><sp/>All</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>you<sp/>have<sp/>questions<sp/>about<sp/>your<sp/>rights<sp/>to<sp/>use<sp/>or<sp/>distribute<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//software,<sp/>please<sp/>contact<sp/>Berkeley<sp/>Lab&apos;s<sp/>Technology<sp/>Transfer<sp/>Department</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//at<sp/><sp/>TTD@lbl.gov<sp/>referring<sp/>to<sp/>&quot;cctbx<sp/>(LBNL<sp/>Ref<sp/>CR-1726)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>software<sp/>package<sp/>includes<sp/>code<sp/>written<sp/>by<sp/>others<sp/>which<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//governed<sp/>by<sp/>separate<sp/>license<sp/>agreements.<sp/><sp/>Please<sp/>refer<sp/>to<sp/>the<sp/>associated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//licenses<sp/>for<sp/>further<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//NOTICE.<sp/><sp/>This<sp/>software<sp/>was<sp/>developed<sp/>under<sp/>funding<sp/>from<sp/>the<sp/>U.S.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//Department<sp/>of<sp/>Energy.<sp/><sp/>As<sp/>such,<sp/>the<sp/>U.S.<sp/>Government<sp/>has<sp/>been<sp/>granted<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//itself<sp/>and<sp/>others<sp/>acting<sp/>on<sp/>its<sp/>behalf<sp/>a<sp/>paid-up,<sp/>nonexclusive,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//irrevocable,<sp/>worldwide<sp/>license<sp/>in<sp/>the<sp/>Software<sp/>to<sp/>reproduce,<sp/>prepare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//derivative<sp/>works,<sp/>and<sp/>perform<sp/>publicly<sp/>and<sp/>display<sp/>publicly.<sp/><sp/>Beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//five<sp/>(5)<sp/>years<sp/>after<sp/>the<sp/>date<sp/>permission<sp/>to<sp/>assert<sp/>copyright<sp/>is<sp/>obtained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//from<sp/>the<sp/>U.S.<sp/>Department<sp/>of<sp/>Energy,<sp/>and<sp/>subject<sp/>to<sp/>any<sp/>subsequent<sp/>five</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//(5)<sp/>year<sp/>renewals,<sp/>the<sp/>U.S.<sp/>Government<sp/>is<sp/>granted<sp/>for<sp/>itself<sp/>and<sp/>others</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//acting<sp/>on<sp/>its<sp/>behalf<sp/>a<sp/>paid-up,<sp/>nonexclusive,<sp/>irrevocable,<sp/>worldwide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//license<sp/>in<sp/>the<sp/>Software<sp/>to<sp/>reproduce,<sp/>prepare<sp/>derivative<sp/>works,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//distribute<sp/>copies<sp/>to<sp/>the<sp/>public,<sp/>perform<sp/>publicly<sp/>and<sp/>display<sp/>publicly,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//and<sp/>to<sp/>permit<sp/>others<sp/>to<sp/>do<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//***<sp/>License<sp/>agreement<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//cctbx<sp/>Copyright<sp/>(c)<sp/>2006,<sp/>The<sp/>Regents<sp/>of<sp/>the<sp/>University<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//California,<sp/>through<sp/>Lawrence<sp/>Berkeley<sp/>National<sp/>Laboratory<sp/>(subject<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//receipt<sp/>of<sp/>any<sp/>required<sp/>approvals<sp/>from<sp/>the<sp/>U.S.<sp/>Dept.<sp/>of<sp/>Energy).<sp/><sp/>All</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//(1)<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//(2)<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//(3)<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>University<sp/>of<sp/>California,<sp/>Lawrence<sp/>Berkeley</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//National<sp/>Laboratory,<sp/>U.S.<sp/>Dept.<sp/>of<sp/>Energy<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//You<sp/>are<sp/>under<sp/>no<sp/>obligation<sp/>whatsoever<sp/>to<sp/>provide<sp/>any<sp/>bug<sp/>fixes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//patches,<sp/>or<sp/>upgrades<sp/>to<sp/>the<sp/>features,<sp/>functionality<sp/>or<sp/>performance<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>source<sp/>code<sp/>(&quot;Enhancements&quot;)<sp/>to<sp/>anyone;<sp/>however,<sp/>if<sp/>you<sp/>choose<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//make<sp/>your<sp/>Enhancements<sp/>available<sp/>either<sp/>publicly,<sp/>or<sp/>directly<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//Lawrence<sp/>Berkeley<sp/>National<sp/>Laboratory,<sp/>without<sp/>imposing<sp/>a<sp/>separate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//written<sp/>license<sp/>agreement<sp/>for<sp/>such<sp/>Enhancements,<sp/>then<sp/>you<sp/>hereby<sp/>grant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>following<sp/>license:<sp/>a<sp/><sp/>non-exclusive,<sp/>royalty-free<sp/>perpetual<sp/>license</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>install,<sp/>use,<sp/>modify,<sp/>prepare<sp/>derivative<sp/>works,<sp/>incorporate<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//other<sp/>computer<sp/>software,<sp/>distribute,<sp/>and<sp/>sublicense<sp/>such<sp/>enhancements<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//derivative<sp/>works<sp/>thereof,<sp/>in<sp/>binary<sp/>and<sp/>source<sp/>code<sp/>form.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/object.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/str.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/extract.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/optional.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/utility/typed_in_place_factory.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;streambuf&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="namespaceecto_1_1py" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceecto" kindref="compound">ecto</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">py<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceboost_1_1python" kindref="compound">bp</ref><sp/>=<sp/><ref refid="namespaceboost_1_1python" kindref="compound">boost::python</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"></codeline>
<codeline lineno="165"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="167" refid="namespaceecto_1_1py_1a103dc3e3c8ee425860ae2260f930752e" refkind="member"><highlight class="normal"><ref refid="namespaceecto_1_1py_1a103dc3e3c8ee425860ae2260f930752e" kindref="member">file_and_line_as_string</ref>(</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>o;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>o<sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o.str();</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="streambuf_8hpp_1ae20ff583f662ecd38dd6e3d54cbb725c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TBXX_ASSERT(condition)<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/>if<sp/>(!(condition))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>file_and_line_as_string(<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__)<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>&quot;:<sp/>ASSERT(&quot;<sp/>#condition<sp/>&quot;)<sp/>failure.&quot;);<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="streambuf_8hpp_1a9b90c8175ab5fb075139b947c67935ff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TBXX_UNREACHABLE_ERROR()<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/>std::runtime_error(<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Control<sp/>flow<sp/>passes<sp/>through<sp/>branch<sp/>that<sp/>should<sp/>be<sp/>unreachable:<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+<sp/>file_and_line_as_string(__FILE__,<sp/>__LINE__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="classecto_1_1py_1_1streambuf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classecto_1_1py_1_1streambuf" kindref="compound">streambuf</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::basic_streambuf&lt;char&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192" refid="classecto_1_1py_1_1streambuf_1ac46c69e7d213fec69f80d1943389366c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::basic_streambuf&lt;char&gt;<sp/><ref refid="classecto_1_1py_1_1streambuf_1ac46c69e7d213fec69f80d1943389366c" kindref="member">base_t</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>syntax</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>base_t::char_type;</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>would<sp/>be<sp/>nicer<sp/>but<sp/>Visual<sp/>Studio<sp/>C++<sp/>8<sp/>chokes<sp/>on<sp/>it</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="classecto_1_1py_1_1streambuf_1acd255be6a50678c600c431c5bea7bc7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>base_t::char_type<sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1acd255be6a50678c600c431c5bea7bc7b" kindref="member">char_type</ref>;</highlight></codeline>
<codeline lineno="200" refid="classecto_1_1py_1_1streambuf_1a1bfd3d3f54b7b91a5ea54f980436a617" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>base_t::int_type<sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a1bfd3d3f54b7b91a5ea54f980436a617" kindref="member">int_type</ref>;</highlight></codeline>
<codeline lineno="201" refid="classecto_1_1py_1_1streambuf_1afdd3f60ff0d0b2f4645742690b7d27dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>base_t::pos_type<sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1afdd3f60ff0d0b2f4645742690b7d27dd" kindref="member">pos_type</ref>;</highlight></codeline>
<codeline lineno="202" refid="classecto_1_1py_1_1streambuf_1aa01772d1599fc51089a209a69fcab7c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>base_t::off_type<sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1aa01772d1599fc51089a209a69fcab7c7" kindref="member">off_type</ref>;</highlight></codeline>
<codeline lineno="203" refid="classecto_1_1py_1_1streambuf_1aaf8a5185360343bec29d804d5b416417" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>base_t::traits_type<sp/><ref refid="classecto_1_1py_1_1streambuf_1aaf8a5185360343bec29d804d5b416417" kindref="member">traits_type</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>work<sp/>around<sp/>Visual<sp/>C++<sp/>7.1<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="classecto_1_1py_1_1streambuf_1ab4446bbe746f4d3713c15492d798872e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1ab4446bbe746f4d3713c15492d798872e" kindref="member">traits_type_eof</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traits_type::eof();<sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"></codeline>
<codeline lineno="213" refid="classecto_1_1py_1_1streambuf_1a7a20a01fb9aeda8677b3c65bccd6b59d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classecto_1_1py_1_1streambuf_1a7a20a01fb9aeda8677b3c65bccd6b59d" kindref="member">default_buffer_size</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"></codeline>
<codeline lineno="218" refid="classecto_1_1py_1_1streambuf_1a363d9b87292423903bc5fe94782ad6e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a363d9b87292423903bc5fe94782ad6e0" kindref="member">streambuf</ref>(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bp::object&amp;<sp/>python_file_obj,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>buffer_size_=0)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a77a192df96e66a2e19cdfce078017df8" kindref="member">py_read</ref><sp/>(getattr(python_file_obj,<sp/></highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/><sp/><ref refid="namespaceboost_1_1python" kindref="compound">bp</ref>::object())),</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1aad739c2392d3c8f0de7d44719c7cc37a" kindref="member">py_write</ref>(getattr(python_file_obj,<sp/></highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespaceboost_1_1python" kindref="compound">bp</ref>::object())),</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref><sp/>(getattr(python_file_obj,<sp/></highlight><highlight class="stringliteral">&quot;seek&quot;</highlight><highlight class="normal">,<sp/><sp/><ref refid="namespaceboost_1_1python" kindref="compound">bp</ref>::object())),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a3735b9e199be3e58c277354127a86146" kindref="member">py_tell</ref><sp/>(getattr(python_file_obj,<sp/></highlight><highlight class="stringliteral">&quot;tell&quot;</highlight><highlight class="normal">,<sp/><sp/><ref refid="namespaceboost_1_1python" kindref="compound">bp</ref>::object())),</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>(buffer_size_<sp/>!=<sp/>0<sp/>?<sp/>buffer_size_<sp/>:<sp/>default_buffer_size),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" kindref="member">write_buffer</ref>(0),</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a7b219ca66aa176fdfbc9d6fb63d15cef" kindref="member">pos_of_read_buffer_end_in_py_file</ref>(0),</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a1775b9bced7a5ff74fe30c788e20ad9e" kindref="member">pos_of_write_buffer_end_in_py_file</ref>(<ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref>(0),</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a63254ed85f60504895f526272e19dd34" kindref="member">file_obj</ref>(python_file_obj)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="streambuf_8hpp_1ae20ff583f662ecd38dd6e3d54cbb725c" kindref="member">TBXX_ASSERT</ref>(<ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Some<sp/>Python<sp/>file<sp/>objects<sp/>(e.g.<sp/>sys.stdout<sp/>and<sp/>sys.stdin)</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>non-functional<sp/>seek<sp/>and<sp/>tell.<sp/>If<sp/>so,<sp/>assign<sp/>None<sp/>to</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_tell<sp/>and<sp/>py_seek.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1a3735b9e199be3e58c277354127a86146" kindref="member">py_tell</ref><sp/>!=<sp/>bp::object())<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a3735b9e199be3e58c277354127a86146" kindref="member">py_tell</ref>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(bp::error_already_set&amp;)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a3735b9e199be3e58c277354127a86146" kindref="member">py_tell</ref><sp/>=<sp/>bp::object();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref><sp/>=<sp/>bp::object();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Boost.Python<sp/>does<sp/>not<sp/>do<sp/>any<sp/>Python<sp/>exception<sp/>handling<sp/>whatsoever</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>So<sp/>we<sp/>need<sp/>to<sp/>catch<sp/>it<sp/>by<sp/>hand<sp/>like<sp/>so.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1aad739c2392d3c8f0de7d44719c7cc37a" kindref="member">py_write</ref><sp/>!=<sp/>bp::object())<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C-like<sp/>string<sp/>to<sp/>make<sp/>debugging<sp/>easier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" kindref="member">write_buffer</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[<ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" kindref="member">write_buffer</ref>[<ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setp(<ref refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" kindref="member">write_buffer</ref>,<sp/><ref refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" kindref="member">write_buffer</ref><sp/>+<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>27.5.2.4.5<sp/>(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref><sp/>=<sp/>pptr();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>attempt<sp/>at<sp/>output<sp/>will<sp/>result<sp/>in<sp/>a<sp/>call<sp/>to<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setp(0,<sp/>0);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1a3735b9e199be3e58c277354127a86146" kindref="member">py_tell</ref><sp/>!=<sp/>bp::object())<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_type<sp/>py_pos<sp/>=<sp/>bp::extract&lt;off_type&gt;(<ref refid="classecto_1_1py_1_1streambuf_1a3735b9e199be3e58c277354127a86146" kindref="member">py_tell</ref>());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a7b219ca66aa176fdfbc9d6fb63d15cef" kindref="member">pos_of_read_buffer_end_in_py_file</ref><sp/>=<sp/>py_pos;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a1775b9bced7a5ff74fe30c788e20ad9e" kindref="member">pos_of_write_buffer_end_in_py_file</ref><sp/>=<sp/>py_pos;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="classecto_1_1py_1_1streambuf_1a3a63f6d4610731b218bcdca5603a51ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classecto_1_1py_1_1streambuf_1a3a63f6d4610731b218bcdca5603a51ef" kindref="member">~streambuf</ref>()<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" kindref="member">write_buffer</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" kindref="member">write_buffer</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"></codeline>
<codeline lineno="280" refid="classecto_1_1py_1_1streambuf_1aba2bcdbeeee00b043f918e60f86ebdd4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::streamsize<sp/><ref refid="classecto_1_1py_1_1streambuf_1aba2bcdbeeee00b043f918e60f86ebdd4" kindref="member">showmanyc</ref>()<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>failure<sp/>=<sp/>traits_type::eof();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int_type<sp/>status<sp/>=<sp/><ref refid="classecto_1_1py_1_1streambuf_1adf2601f0f067538a980dced85e8f8d2e" kindref="member">underflow</ref>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>failure)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>egptr()<sp/>-<sp/>gptr();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="classecto_1_1py_1_1streambuf_1adf2601f0f067538a980dced85e8f8d2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>int_type<sp/><ref refid="classecto_1_1py_1_1streambuf_1adf2601f0f067538a980dced85e8f8d2e" kindref="member">underflow</ref>()<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>failure<sp/>=<sp/>traits_type::eof();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1a77a192df96e66a2e19cdfce078017df8" kindref="member">py_read</ref><sp/>==<sp/>bp::object())<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;That<sp/>Python<sp/>file<sp/>object<sp/>has<sp/>no<sp/>&apos;read&apos;<sp/>attribute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1ac239012691e5d3485572159a53600005" kindref="member">read_buffer</ref><sp/>=<sp/><ref refid="classecto_1_1py_1_1streambuf_1a77a192df96e66a2e19cdfce078017df8" kindref="member">py_read</ref>(<ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*read_buffer_data;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bp::ssize_t<sp/>py_n_read;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyString_AsStringAndSize(<ref refid="classecto_1_1py_1_1streambuf_1ac239012691e5d3485572159a53600005" kindref="member">read_buffer</ref>.ptr(),</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;read_buffer_data,<sp/>&amp;py_n_read)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setg(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>method<sp/>&apos;read&apos;<sp/>of<sp/>the<sp/>Python<sp/>file<sp/>object<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;did<sp/>not<sp/>return<sp/>a<sp/>string.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>off_type<sp/>n_read<sp/>=<sp/>(<ref refid="classecto_1_1py_1_1streambuf_1aa01772d1599fc51089a209a69fcab7c7" kindref="member">off_type</ref>)py_n_read;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a7b219ca66aa176fdfbc9d6fb63d15cef" kindref="member">pos_of_read_buffer_end_in_py_file</ref><sp/>+=<sp/>n_read;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setg(read_buffer_data,<sp/>read_buffer_data,<sp/>read_buffer_data<sp/>+<sp/>n_read);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>^^^27.5.2.3.1<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_read<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failure;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traits_type::to_int_type(read_buffer_data[0]);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="classecto_1_1py_1_1streambuf_1a6eb250e56b6bbc9345b4f00981e4182f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>int_type<sp/><ref refid="classecto_1_1py_1_1streambuf_1a6eb250e56b6bbc9345b4f00981e4182f" kindref="member">overflow</ref>(int_type<sp/>c=<ref refid="classecto_1_1py_1_1streambuf_1ab4446bbe746f4d3713c15492d798872e" kindref="member">traits_type_eof</ref>())<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1aad739c2392d3c8f0de7d44719c7cc37a" kindref="member">py_write</ref><sp/>==<sp/>bp::object())<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;That<sp/>Python<sp/>file<sp/>object<sp/>has<sp/>no<sp/>&apos;write&apos;<sp/>attribute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref><sp/>=<sp/>std::max(<ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref>,<sp/>pptr());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>off_type<sp/>n_written<sp/>=<sp/>(<ref refid="classecto_1_1py_1_1streambuf_1aa01772d1599fc51089a209a69fcab7c7" kindref="member">off_type</ref>)(<ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref><sp/>-<sp/>pbase());</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bp::str<sp/>chunk(pbase(),<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1aad739c2392d3c8f0de7d44719c7cc37a" kindref="member">py_write</ref>(chunk);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!traits_type::eq_int_type(c,<sp/>traits_type::eof()))<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1aad739c2392d3c8f0de7d44719c7cc37a" kindref="member">py_write</ref>(traits_type::to_char_type(c));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_written++;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_written)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a1775b9bced7a5ff74fe30c788e20ad9e" kindref="member">pos_of_write_buffer_end_in_py_file</ref><sp/>+=<sp/>n_written;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setp(pbase(),<sp/>epptr());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>^^^<sp/>27.5.2.4.5<sp/>(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref><sp/>=<sp/>pptr();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traits_type::eq_int_type(</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c,<sp/>traits_type::eof())<sp/>?<sp/>traits_type::not_eof(c)<sp/>:<sp/>c;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"></codeline>
<codeline lineno="343" refid="classecto_1_1py_1_1streambuf_1af09b35e1d7da997aacdf99c8802c0fa2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classecto_1_1py_1_1streambuf_1af09b35e1d7da997aacdf99c8802c0fa2" kindref="member">sync</ref>()<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref><sp/>=<sp/>std::max(<ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref>,<sp/>pptr());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref><sp/>&amp;&amp;<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref><sp/>&gt;<sp/>pbase())<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_type<sp/>delta<sp/>=<sp/>pptr()<sp/>-<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_type<sp/>status<sp/>=<sp/><ref refid="classecto_1_1py_1_1streambuf_1a6eb250e56b6bbc9345b4f00981e4182f" kindref="member">overflow</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traits_type::eq_int_type(status,<sp/>traits_type::eof()))<sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref><sp/>!=<sp/>bp::object())<sp/><ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref>(delta,<sp/>1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gptr()<sp/>&amp;&amp;<sp/>gptr()<sp/>&lt;<sp/>egptr())<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref><sp/>!=<sp/>bp::object())<sp/><ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref>(gptr()<sp/>-<sp/>egptr(),<sp/>1);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="classecto_1_1py_1_1streambuf_1af30e4b5af87fcc71a7974b1c00721dbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_type<sp/><ref refid="classecto_1_1py_1_1streambuf_1af30e4b5af87fcc71a7974b1c00721dbb" kindref="member">seekoff</ref>(off_type<sp/>off,<sp/>std::ios_base::seekdir<sp/>way,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ios_base::openmode<sp/>which=<sp/><sp/>std::ios_base::in</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>std::ios_base::out)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>practice,<sp/>&quot;which&quot;<sp/>is<sp/>either<sp/>std::ios_base::in<sp/>or<sp/>out</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>since<sp/>we<sp/>end<sp/>up<sp/>here<sp/>because<sp/>either<sp/>seekp<sp/>or<sp/>seekg<sp/>was<sp/>called</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>the<sp/>stream<sp/>using<sp/>this<sp/>buffer.<sp/>That<sp/>simplifies<sp/>the<sp/>code</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>few<sp/>places.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>failure<sp/>=<sp/><ref refid="classecto_1_1py_1_1streambuf_1aa01772d1599fc51089a209a69fcab7c7" kindref="member">off_type</ref>(-1);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref><sp/>==<sp/>bp::object())<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;That<sp/>Python<sp/>file<sp/>object<sp/>has<sp/>no<sp/>&apos;seek&apos;<sp/>attribute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>the<sp/>read<sp/>buffer<sp/>to<sp/>contain<sp/>something!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>==<sp/>std::ios_base::in<sp/>&amp;&amp;<sp/>!gptr())<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traits_type::eq_int_type(<ref refid="classecto_1_1py_1_1streambuf_1adf2601f0f067538a980dced85e8f8d2e" kindref="member">underflow</ref>(),<sp/>traits_type::eof()))<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failure;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>whence<sp/>parameter<sp/>for<sp/>Python<sp/>seek</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whence;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(way)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::ios_base::beg:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whence<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::ios_base::cur:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whence<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>std::ios_base::end:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whence<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failure;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>have<sp/>a<sp/>go</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;off_type&gt;<sp/>result<sp/>=<sp/><ref refid="classecto_1_1py_1_1streambuf_1a367a7e20642d4a3ebcefd2f6abc3c3e6" kindref="member">seekoff_without_calling_python</ref>(</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off,<sp/>way,<sp/>which);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>call<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>==<sp/>std::ios_base::out)<sp/><ref refid="classecto_1_1py_1_1streambuf_1a6eb250e56b6bbc9345b4f00981e4182f" kindref="member">overflow</ref>();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(way<sp/>==<sp/>std::ios_base::cur)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(which<sp/>==<sp/>std::ios_base::in)<sp/><sp/>off<sp/>-=<sp/>egptr()<sp/>-<sp/>gptr();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>==<sp/>std::ios_base::out)<sp/>off<sp/>+=<sp/>pptr()<sp/>-<sp/>pbase();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref>(off,<sp/>whence);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="classecto_1_1py_1_1streambuf_1aa01772d1599fc51089a209a69fcab7c7" kindref="member">off_type</ref>(bp::extract&lt;off_type&gt;(<ref refid="classecto_1_1py_1_1streambuf_1a3735b9e199be3e58c277354127a86146" kindref="member">py_tell</ref>()));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>==<sp/>std::ios_base::in)<sp/><ref refid="classecto_1_1py_1_1streambuf_1adf2601f0f067538a980dced85e8f8d2e" kindref="member">underflow</ref>();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*result;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="classecto_1_1py_1_1streambuf_1a5763f3ff57fc8044b30a695ad7c403f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_type<sp/><ref refid="classecto_1_1py_1_1streambuf_1a5763f3ff57fc8044b30a695ad7c403f7" kindref="member">seekpos</ref>(pos_type<sp/>sp,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ios_base::openmode<sp/>which=<sp/><sp/>std::ios_base::in</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>std::ios_base::out)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classecto_1_1py_1_1streambuf_1af30e4b5af87fcc71a7974b1c00721dbb" kindref="member">streambuf::seekoff</ref>(sp,<sp/>std::ios_base::beg,<sp/>which);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="433" refid="classecto_1_1py_1_1streambuf_1aad739c2392d3c8f0de7d44719c7cc37a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>bp::object<sp/><ref refid="classecto_1_1py_1_1streambuf_1a77a192df96e66a2e19cdfce078017df8" kindref="member">py_read</ref>,<sp/><ref refid="classecto_1_1py_1_1streambuf_1aad739c2392d3c8f0de7d44719c7cc37a" kindref="member">py_write</ref>,<sp/><ref refid="classecto_1_1py_1_1streambuf_1ad4e0dc91a74411d2181897d026ff945b" kindref="member">py_seek</ref>,<sp/><ref refid="classecto_1_1py_1_1streambuf_1a3735b9e199be3e58c277354127a86146" kindref="member">py_tell</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>actually<sp/>a<sp/>Python<sp/>string<sp/>and<sp/>the<sp/>actual<sp/>read<sp/>buffer<sp/>is</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>its<sp/>internal<sp/>data,<sp/>i.e.<sp/>an<sp/>array<sp/>of<sp/>characters.<sp/>We<sp/>use<sp/>a<sp/>Boost.Python</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/>so<sp/>as<sp/>to<sp/>hold<sp/>on<sp/>it:<sp/>as<sp/>a<sp/>result,<sp/>the<sp/>actual<sp/>buffer<sp/>can&apos;t</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>go<sp/>away.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="classecto_1_1py_1_1streambuf_1ac239012691e5d3485572159a53600005" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>bp::object<sp/><ref refid="classecto_1_1py_1_1streambuf_1ac239012691e5d3485572159a53600005" kindref="member">read_buffer</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>mere<sp/>array<sp/>of<sp/>char&apos;s<sp/>allocated<sp/>on<sp/>the<sp/>heap<sp/>at<sp/>construction<sp/>time<sp/>and</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-allocated<sp/>only<sp/>at<sp/>destruction<sp/>time.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classecto_1_1py_1_1streambuf_1a331e541fac616ac9ac3a81fb117057c6" kindref="member">write_buffer</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="classecto_1_1py_1_1streambuf_1a1775b9bced7a5ff74fe30c788e20ad9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>off_type<sp/><ref refid="classecto_1_1py_1_1streambuf_1a7b219ca66aa176fdfbc9d6fb63d15cef" kindref="member">pos_of_read_buffer_end_in_py_file</ref>,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1a1775b9bced7a5ff74fe30c788e20ad9e" kindref="member">pos_of_write_buffer_end_in_py_file</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>farthest<sp/>place<sp/>the<sp/>buffer<sp/>has<sp/>been<sp/>written<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="classecto_1_1py_1_1streambuf_1a367a7e20642d4a3ebcefd2f6abc3c3e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::optional&lt;off_type&gt;<sp/><ref refid="classecto_1_1py_1_1streambuf_1a367a7e20642d4a3ebcefd2f6abc3c3e6" kindref="member">seekoff_without_calling_python</ref>(</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>off_type<sp/>off,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ios_base::seekdir<sp/>way,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ios_base::openmode<sp/>which)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;off_type&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>failure;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>range<sp/>and<sp/>current<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>off_type<sp/>buf_begin,<sp/>buf_end,<sp/>buf_cur,<sp/>upper_bound;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>off_type<sp/>pos_of_buffer_end_in_py_file;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>==<sp/>std::ios_base::in)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_of_buffer_end_in_py_file<sp/>=<sp/><ref refid="classecto_1_1py_1_1streambuf_1a7b219ca66aa176fdfbc9d6fb63d15cef" kindref="member">pos_of_read_buffer_end_in_py_file</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_begin<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(eback());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_cur<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(gptr());</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_end<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(egptr());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_bound<sp/>=<sp/>buf_end;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>==<sp/>std::ios_base::out)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_of_buffer_end_in_py_file<sp/>=<sp/><ref refid="classecto_1_1py_1_1streambuf_1a1775b9bced7a5ff74fe30c788e20ad9e" kindref="member">pos_of_write_buffer_end_in_py_file</ref>;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_begin<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pbase());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_cur<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pptr());</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_end<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(epptr());</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>farthest_pptr<sp/>=<sp/>std::max(farthest_pptr,<sp/>pptr());</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_bound<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classecto_1_1py_1_1streambuf_1a8267e360cfb0201b1518a0dfd3d7c353" kindref="member">farthest_pptr</ref>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="streambuf_8hpp_1a9b90c8175ab5fb075139b947c67935ff" kindref="member">TBXX_UNREACHABLE_ERROR</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sought<sp/>position<sp/>in<sp/>&quot;buffer<sp/>coordinate&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>off_type<sp/>buf_sought;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(way<sp/>==<sp/>std::ios_base::cur)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_sought<sp/>=<sp/>buf_cur<sp/>+<sp/>off;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(way<sp/>==<sp/>std::ios_base::beg)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf_sought<sp/>=<sp/>buf_end<sp/>+<sp/>(off<sp/>-<sp/>pos_of_buffer_end_in_py_file);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(way<sp/>==<sp/>std::ios_base::end)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failure;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="streambuf_8hpp_1a9b90c8175ab5fb075139b947c67935ff" kindref="member">TBXX_UNREACHABLE_ERROR</ref>();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>sought<sp/>position<sp/>is<sp/>not<sp/>in<sp/>the<sp/>buffer,<sp/>give<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf_sought<sp/>&lt;<sp/>buf_begin<sp/>||<sp/>buf_sought<sp/>&gt;=<sp/>upper_bound)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failure;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>in<sp/>wonderland</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(which<sp/>==<sp/>std::ios_base::in)<sp/><sp/>gbump(buf_sought<sp/>-<sp/>buf_cur);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>==<sp/>std::ios_base::out)<sp/>pbump(buf_sought<sp/>-<sp/>buf_cur);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos_of_buffer_end_in_py_file<sp/>+<sp/>(buf_sought<sp/>-<sp/>buf_end);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="classecto_1_1py_1_1streambuf_1_1istream" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classecto_1_1py_1_1streambuf_1_1istream" kindref="compound">istream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::istream</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="514" refid="classecto_1_1py_1_1streambuf_1_1istream_1aff2d95cb5e4b1113f873b7a7e1cead29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1_1istream_1aff2d95cb5e4b1113f873b7a7e1cead29" kindref="member">istream</ref>(<ref refid="classecto_1_1py_1_1streambuf" kindref="compound">streambuf</ref>&amp;<sp/>buf)<sp/>:<sp/>std::<ref refid="classecto_1_1py_1_1streambuf_1_1istream" kindref="compound">istream</ref>(&amp;buf)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exceptions(std::ios_base::badbit);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="classecto_1_1py_1_1streambuf_1_1istream_1ab53f3c2893d995a22ef2374ce9a00004" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1_1istream_1ab53f3c2893d995a22ef2374ce9a00004" kindref="member">~istream</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;good())<sp/>this-&gt;<ref refid="classecto_1_1py_1_1streambuf_1af09b35e1d7da997aacdf99c8802c0fa2" kindref="member">sync</ref>();<sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="classecto_1_1py_1_1streambuf_1_1ostream" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classecto_1_1py_1_1streambuf_1_1ostream" kindref="compound">ostream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::ostream</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="525" refid="classecto_1_1py_1_1streambuf_1_1ostream_1ab62cdec76b066fa4492b032dd1533bc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1_1ostream_1ab62cdec76b066fa4492b032dd1533bc5" kindref="member">ostream</ref>(<ref refid="classecto_1_1py_1_1streambuf" kindref="compound">streambuf</ref>&amp;<sp/>buf)<sp/>:<sp/>std::<ref refid="classecto_1_1py_1_1streambuf_1_1ostream" kindref="compound">ostream</ref>(&amp;buf)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exceptions(std::ios_base::badbit);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="classecto_1_1py_1_1streambuf_1_1ostream_1abeaab4a21b07a3bbf944d4ce8693a7b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf_1_1ostream_1abeaab4a21b07a3bbf944d4ce8693a7b5" kindref="member">~ostream</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;good())<sp/>this-&gt;flush();<sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="532" refid="classecto_1_1py_1_1streambuf_1a63254ed85f60504895f526272e19dd34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>bp::object<sp/><ref refid="classecto_1_1py_1_1streambuf_1a63254ed85f60504895f526272e19dd34" kindref="member">file_obj</ref>;<sp/></highlight><highlight class="comment">//original<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">};</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">std::size_t<sp/><ref refid="classecto_1_1py_1_1streambuf_1a7a20a01fb9aeda8677b3c65bccd6b59d" kindref="member">streambuf::default_buffer_size</ref><sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="structecto_1_1py_1_1streambuf__capsule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structecto_1_1py_1_1streambuf__capsule" kindref="compound">streambuf_capsule</ref></highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539" refid="structecto_1_1py_1_1streambuf__capsule_1af18572e50f3cc158db18b7c0655ccd33" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf" kindref="compound">streambuf</ref><sp/><ref refid="structecto_1_1py_1_1streambuf__capsule_1af18572e50f3cc158db18b7c0655ccd33" kindref="member">python_streambuf</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="structecto_1_1py_1_1streambuf__capsule_1ad175cd2ce674303c092041a5da481b73" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structecto_1_1py_1_1streambuf__capsule_1ad175cd2ce674303c092041a5da481b73" kindref="member">streambuf_capsule</ref>(</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>bp::object&amp;<sp/>python_file_obj,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>=0)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>:</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>python_streambuf(python_file_obj,<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="structecto_1_1py_1_1streambuf__capsule_1a716c8fa0af952120d46dd781409c4af4" refkind="member"><highlight class="normal"><sp/><sp/>bp::object<sp/><ref refid="structecto_1_1py_1_1streambuf__capsule_1a716c8fa0af952120d46dd781409c4af4" kindref="member">get_original_file</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>python_streambuf.<ref refid="classecto_1_1py_1_1streambuf_1a63254ed85f60504895f526272e19dd34" kindref="member">file_obj</ref>;}</highlight></codeline>
<codeline lineno="549"><highlight class="normal">};</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="structecto_1_1py_1_1ostream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structecto_1_1py_1_1ostream" kindref="compound">ostream</ref><sp/>:<sp/><ref refid="structecto_1_1py_1_1streambuf__capsule" kindref="compound">streambuf_capsule</ref>,<sp/><ref refid="classecto_1_1py_1_1streambuf_1_1ostream" kindref="compound">streambuf::ostream</ref></highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553" refid="structecto_1_1py_1_1ostream_1a5fc23212b0b77a69a0c4e7e67133b2c8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structecto_1_1py_1_1ostream_1a5fc23212b0b77a69a0c4e7e67133b2c8" kindref="member">ostream</ref>(</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>bp::object&amp;<sp/>python_file_obj,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>=0)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structecto_1_1py_1_1streambuf__capsule" kindref="compound">streambuf_capsule</ref>(python_file_obj,<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>),</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf" kindref="compound">streambuf</ref>::<ref refid="structecto_1_1py_1_1ostream" kindref="compound">ostream</ref>(python_streambuf)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="structecto_1_1py_1_1ostream_1a69cba9ec021b14b76fd08d35ea322434" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structecto_1_1py_1_1ostream_1a69cba9ec021b14b76fd08d35ea322434" kindref="member">~ostream</ref>()</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;good())<sp/>this-&gt;flush();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(bp::error_already_set&amp;)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fixme<sp/>this<sp/>should<sp/>not<sp/>throw<sp/>in<sp/>the<sp/>detructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>throw<sp/>std::runtime_error(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>(</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Problem<sp/>closing<sp/>python<sp/>ostream.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Known<sp/>limitation:<sp/>the<sp/>error<sp/>is<sp/>unrecoverable.<sp/>Sorry.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Suggestion<sp/>for<sp/>programmer:<sp/>add<sp/>ostream.flush()<sp/>before&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>returning.&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal">};</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="structecto_1_1py_1_1istream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structecto_1_1py_1_1istream" kindref="compound">istream</ref><sp/>:<sp/><ref refid="structecto_1_1py_1_1streambuf__capsule" kindref="compound">streambuf_capsule</ref>,<sp/><ref refid="classecto_1_1py_1_1streambuf_1_1istream" kindref="compound">streambuf::istream</ref></highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581" refid="structecto_1_1py_1_1istream_1a1261100ee2202be4989166b6a16fc1b0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structecto_1_1py_1_1istream_1a1261100ee2202be4989166b6a16fc1b0" kindref="member">istream</ref>(</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>bp::object&amp;<sp/>python_file_obj,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>=0)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>:</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structecto_1_1py_1_1streambuf__capsule" kindref="compound">streambuf_capsule</ref>(python_file_obj,<sp/><ref refid="classecto_1_1py_1_1streambuf_1a8d60fa297a9140474d136a48342ac850" kindref="member">buffer_size</ref>),</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classecto_1_1py_1_1streambuf" kindref="compound">streambuf</ref>::<ref refid="structecto_1_1py_1_1istream" kindref="compound">istream</ref>(python_streambuf)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="588"><highlight class="normal">};</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>boost_adaptbx::python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/vrabaud/workspace/recognition_kitchen/src/ecto/include/ecto/python/streambuf.hpp"/>
  </compounddef>
</doxygen>
