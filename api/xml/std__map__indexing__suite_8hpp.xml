<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="std__map__indexing__suite_8hpp" kind="file">
    <compoundname>std_map_indexing_suite.hpp</compoundname>
    <includes refid="python_8hpp" local="no">ecto/python.hpp</includes>
    <includes local="no">boost/python/suite/indexing/indexing_suite.hpp</includes>
    <includes local="no">boost/python/iterator.hpp</includes>
    <includes local="no">boost/python/call_method.hpp</includes>
    <includes local="no">boost/python/tuple.hpp</includes>
    <includes local="no">boost/iterator/transform_iterator.hpp</includes>
    <incdepgraph>
      <node id="2058">
        <label>boost/python/iterator.hpp</label>
      </node>
      <node id="2061">
        <label>boost/iterator/transform_iterator.hpp</label>
      </node>
      <node id="2054">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="2057">
        <label>boost/python/suite/indexing/indexing_suite.hpp</label>
      </node>
      <node id="2056">
        <label>boost/noncopyable.hpp</label>
      </node>
      <node id="2055">
        <label>map</label>
      </node>
      <node id="2050">
        <label>/home/vrabaud/workspace/recognition_kitchen/src/ecto/include/ecto/python/std_map_indexing_suite.hpp</label>
        <link refid="std_map_indexing_suite.hpp"/>
        <childnode refid="2051" relation="include">
        </childnode>
        <childnode refid="2057" relation="include">
        </childnode>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2059" relation="include">
        </childnode>
        <childnode refid="2060" relation="include">
        </childnode>
        <childnode refid="2061" relation="include">
        </childnode>
      </node>
      <node id="2051">
        <label>ecto/python.hpp</label>
        <link refid="python_8hpp"/>
        <childnode refid="2052" relation="include">
        </childnode>
        <childnode refid="2053" relation="include">
        </childnode>
        <childnode refid="2054" relation="include">
        </childnode>
        <childnode refid="2055" relation="include">
        </childnode>
        <childnode refid="2056" relation="include">
        </childnode>
      </node>
      <node id="2060">
        <label>boost/python/tuple.hpp</label>
      </node>
      <node id="2053">
        <label>boost/python.hpp</label>
      </node>
      <node id="2052">
        <label>Python.h</label>
      </node>
      <node id="2059">
        <label>boost/python/call_method.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classboost_1_1python_1_1std__map__indexing__suite" prot="public">boost::python::std_map_indexing_suite</innerclass>
    <innerclass refid="classboost_1_1python_1_1detail_1_1final__std__map__derived__policies" prot="public">boost::python::detail::final_std_map_derived_policies</innerclass>
    <innerclass refid="classboost_1_1python_1_1std__map__indexing__suite" prot="public">boost::python::std_map_indexing_suite</innerclass>
    <innerclass refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory" prot="public">boost::python::std_map_indexing_suite::init_factory</innerclass>
    <innerclass refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iterkeys" prot="public">boost::python::std_map_indexing_suite::iterkeys</innerclass>
    <innerclass refid="structboost_1_1python_1_1std__map__indexing__suite_1_1itervalues" prot="public">boost::python::std_map_indexing_suite::itervalues</innerclass>
    <innerclass refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iteritems" prot="public">boost::python::std_map_indexing_suite::iteritems</innerclass>
    <innerclass refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl" prot="public">boost::python::std_map_indexing_suite::make_transform_impl</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1python">boost::python</innernamespace>
    <innernamespace refid="namespaceboost_1_1python_1_1detail">boost::python::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Joel<sp/>de<sp/>Guzman<sp/>2003.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Modified<sp/>by<sp/>Troy<sp/>D.<sp/>Straszheim<sp/>and<sp/>Jakob<sp/>van<sp/>Santen,<sp/>2009-03-26</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Pulled<sp/>in<sp/>to<sp/>ecto<sp/>in<sp/>2010-11<sp/>by<sp/>Troy<sp/>D.<sp/>Straszheim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Willow<sp/>Garage<sp/>BSD<sp/>License<sp/>not<sp/>applicable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ICETRAY_PYTHON_STD_MAP_INDEXING_SUITE_HPP_INCLUDED</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ICETRAY_PYTHON_STD_MAP_INDEXING_SUITE_HPP_INCLUDED</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;<ref refid="python_8hpp" kindref="compound">ecto/python.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;boost/python/suite/indexing/indexing_suite.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;boost/python/iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;boost/python/call_method.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;boost/python/tuple.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;boost/iterator/transform_iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bp<sp/>=<sp/>boost::python;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="namespaceboost_1_1python" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">python<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NoProxy,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DerivedPolicies&gt;</highlight></codeline>
<codeline lineno="24" refid="classboost_1_1python_1_1std__map__indexing__suite" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1python_1_1std__map__indexing__suite" kindref="compound">std_map_indexing_suite</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="namespaceboost_1_1python_1_1detail" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NoProxy&gt;</highlight></codeline>
<codeline lineno="29" refid="classboost_1_1python_1_1detail_1_1final__std__map__derived__policies" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1python_1_1detail_1_1final__std__map__derived__policies" kindref="compound">final_std_map_derived_policies</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite" kindref="compound">std_map_indexing_suite</ref>&lt;Container,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoProxy,<sp/>final_std_map_derived_policies&lt;Container,<sp/>NoProxy&gt;<sp/>&gt;<sp/>{};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>map_indexing_suite<sp/>class<sp/>is<sp/>a<sp/>predefined<sp/>indexing_suite<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>for<sp/>wrapping<sp/>std::vector<sp/>(and<sp/>std::vector<sp/>like)<sp/>classes.<sp/>It<sp/>provides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>policies<sp/>required<sp/>by<sp/>the<sp/>indexing_suite<sp/>(see<sp/>indexing_suite).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Example<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>class<sp/>X<sp/>{...};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>class_&lt;std::map&lt;std::string,<sp/>X&gt;<sp/>&gt;(&quot;XMap&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(map_indexing_suite&lt;std::map&lt;std::string,<sp/>X&gt;<sp/>&gt;())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default<sp/>indexed<sp/>elements<sp/>are<sp/>returned<sp/>by<sp/>proxy.<sp/>This<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disabled<sp/>by<sp/>supplying<sp/>*true*<sp/>in<sp/>the<sp/>NoProxy<sp/>template<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Container,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NoProxy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DerivedPolicies</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classboost_1_1python_1_1detail_1_1final__std__map__derived__policies" kindref="compound">detail::final_std_map_derived_policies&lt;Container, NoProxy&gt;</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classboost_1_1python_1_1std__map__indexing__suite" kindref="compound">std_map_indexing_suite</ref></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>indexing_suite&lt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Container</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>DerivedPolicies</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>NoProxy</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>true</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>typename<sp/>Container::value_type::second_type</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>typename<sp/>Container::key_type</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>typename<sp/>Container::key_type</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classboost_1_1python_1_1std__map__indexing__suite_1aff9ed68cf30e805a04a313d92c62ab38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aff9ed68cf30e805a04a313d92c62ab38" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="69" refid="classboost_1_1python_1_1std__map__indexing__suite_1a3e9a6a8b8ba34759cf0ba99fe5966041" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type::second_type<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a3e9a6a8b8ba34759cf0ba99fe5966041" kindref="member">data_type</ref>;</highlight></codeline>
<codeline lineno="70" refid="classboost_1_1python_1_1std__map__indexing__suite_1a4e2daeb60a58d6ce9964e0ea27680009" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::key_type<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4e2daeb60a58d6ce9964e0ea27680009" kindref="member">key_type</ref>;</highlight></codeline>
<codeline lineno="71" refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::key_type<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref>;</highlight></codeline>
<codeline lineno="72" refid="classboost_1_1python_1_1std__map__indexing__suite_1ad1c24ad53b2e27b061f75591c74296c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::size_type<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1ad1c24ad53b2e27b061f75591c74296c2" kindref="member">size_type</ref>;</highlight></codeline>
<codeline lineno="73" refid="classboost_1_1python_1_1std__map__indexing__suite_1a54aa644dcb3913334f8b0152901940ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::difference_type<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a54aa644dcb3913334f8b0152901940ef" kindref="member">difference_type</ref>;</highlight></codeline>
<codeline lineno="74" refid="classboost_1_1python_1_1std__map__indexing__suite_1aae0c4473455223a4e048cc207ca7b3ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::const_iterator<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aae0c4473455223a4e048cc207ca7b3ea" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>__getitem__<sp/>for<sp/>std::pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME:<sp/>horrible<sp/>(20x)<sp/>performance<sp/>regression<sp/>vs.<sp/>(pair.key(),pair.data())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classboost_1_1python_1_1std__map__indexing__suite_1a802d62d636e685954b7abe3331de7af6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a802d62d636e685954b7abe3331de7af6" kindref="member">pair_getitem</ref>(<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aff9ed68cf30e805a04a313d92c62ab38" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0<sp/>||<sp/>i==-2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(x.first);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==1<sp/>||<sp/>i==-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(x.second);<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_IndexError,</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_error_already_set();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object();<sp/></highlight><highlight class="comment">//<sp/>None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>__iter__<sp/>for<sp/>std::pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>cheat<sp/>by<sp/>making<sp/>a<sp/>tuple<sp/>and<sp/>returning<sp/>its<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME:<sp/>replace<sp/>this<sp/>with<sp/>a<sp/>pure<sp/>C++<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>how<sp/>to<sp/>handle<sp/>the<sp/>different<sp/>return<sp/>types<sp/>of<sp/>first<sp/>and<sp/>second?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classboost_1_1python_1_1std__map__indexing__suite_1a09b84169bb3b2ceb9c576c41cd63280e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a09b84169bb3b2ceb9c576c41cd63280e" kindref="member">pair_iter</ref>(<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aff9ed68cf30e805a04a313d92c62ab38" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>tuple<sp/>=<sp/>bp::make_tuple(x.first,x.second);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>incref(tuple.attr(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">)().ptr());</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>__len__<sp/>std::pair<sp/>=<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classboost_1_1python_1_1std__map__indexing__suite_1a639bbbf3265c0cab8419b106590c3857" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a639bbbf3265c0cab8419b106590c3857" kindref="member">pair_len</ref>(<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aff9ed68cf30e805a04a313d92c62ab38" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>a<sp/>list<sp/>of<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="classboost_1_1python_1_1std__map__indexing__suite_1a1d08ce35eb71bc9248f64a515d6d9775" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::list<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a1d08ce35eb71bc9248f64a515d6d9775" kindref="member">keys</ref>(Container<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><sp/>x)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::list<sp/>t;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::const_iterator<sp/>it<sp/>=<sp/>x.begin();<sp/>it<sp/>!=<sp/>x.end();<sp/>it++)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.append(it-&gt;first);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>a<sp/>list<sp/>of<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classboost_1_1python_1_1std__map__indexing__suite_1a81c04a5902c3ea0b559b56ab66e600a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::list<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a81c04a5902c3ea0b559b56ab66e600a9" kindref="member">values</ref>(Container<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><sp/>x)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::list<sp/>t;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::const_iterator<sp/>it<sp/>=<sp/>x.begin();<sp/>it<sp/>!=<sp/>x.end();<sp/>it++)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.append(it-&gt;second);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>a<sp/>list<sp/>of<sp/>(key,value)<sp/>tuples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classboost_1_1python_1_1std__map__indexing__suite_1a6e44b3f64f0723b75c7e00b8d46bab92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::list<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a6e44b3f64f0723b75c7e00b8d46bab92" kindref="member">items</ref>(Container<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><sp/>x)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::list<sp/>t;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::const_iterator<sp/>it<sp/>=<sp/>x.begin();<sp/>it<sp/>!=<sp/>x.end();<sp/>it++)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.append(bp::make_tuple(it-&gt;first,<sp/>it-&gt;second));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>a<sp/>shallow<sp/>copy<sp/>of<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>is<sp/>this<sp/>actually<sp/>a<sp/>shallow<sp/>copy,<sp/>or<sp/>did<sp/>i<sp/>duplicate<sp/>the<sp/>pairs?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Container<sp/>copy(Container<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Container<sp/>newmap;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aae0c4473455223a4e048cc207ca7b3ea" kindref="member">const_iterator</ref><sp/>it<sp/>=<sp/>x.begin();it<sp/>!=<sp/>x.end();it++)<sp/>newmap.insert(*it);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newmap;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>with<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classboost_1_1python_1_1std__map__indexing__suite_1a6012daef85763e30ed55ef753933ff1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a6012daef85763e30ed55ef753933ff1b" kindref="member">dict_get</ref>(Container<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>k,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>default_val<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">())</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aae0c4473455223a4e048cc207ca7b3ea" kindref="member">const_iterator</ref><sp/>it<sp/>=<sp/>x.find(k);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>x.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(it-&gt;second);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_val;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preserve<sp/>default<sp/>value<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aeea6d865c496b7145baa50301a4b5702" kindref="member">BOOST_PYTHON_FUNCTION_OVERLOADS</ref>(dict_get_overloads,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a6012daef85763e30ed55ef753933ff1b" kindref="member">dict_get</ref>,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pop<sp/>map[key],<sp/>or<sp/>throw<sp/>an<sp/>error<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="classboost_1_1python_1_1std__map__indexing__suite_1a56d69ee32c136ed83389eefae5f8df3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a56d69ee32c136ed83389eefae5f8df3a" kindref="member">dict_pop</ref>(Container<sp/>&amp;<sp/>x,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>k)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aae0c4473455223a4e048cc207ca7b3ea" kindref="member">const_iterator</ref><sp/>it<sp/>=<sp/>x.find(k);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>x.end())<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>object(it-&gt;second);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.erase(it-&gt;first);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_KeyError,</highlight><highlight class="stringliteral">&quot;Key<sp/>not<sp/>found.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_error_already_set();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object();<sp/></highlight><highlight class="comment">//<sp/>None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pop<sp/>map[key],<sp/>or<sp/>return<sp/>default_val<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="classboost_1_1python_1_1std__map__indexing__suite_1a923cb4bd1266dd53065eba4d3c91279a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a923cb4bd1266dd53065eba4d3c91279a" kindref="member">dict_pop_default</ref>(Container<sp/>&amp;<sp/>x,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>k,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>default_val)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aae0c4473455223a4e048cc207ca7b3ea" kindref="member">const_iterator</ref><sp/>it<sp/>=<sp/>x.find(k);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>x.end())<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>object(it-&gt;second);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.erase(it-&gt;first);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_val;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pop<sp/>a<sp/>tuple,<sp/>or<sp/>throw<sp/>an<sp/>error<sp/>if<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classboost_1_1python_1_1std__map__indexing__suite_1af207a28bb4d4a7fa8364139dd0484a84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1af207a28bb4d4a7fa8364139dd0484a84" kindref="member">dict_pop_item</ref>(Container<sp/>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aae0c4473455223a4e048cc207ca7b3ea" kindref="member">const_iterator</ref><sp/>it<sp/>=<sp/>x.begin();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>x.end())<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>boost::python::make_tuple(it-&gt;first,it-&gt;second);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.erase(it-&gt;first);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_KeyError,</highlight><highlight class="stringliteral">&quot;No<sp/>more<sp/>items<sp/>to<sp/>pop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_error_already_set();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object();<sp/></highlight><highlight class="comment">//<sp/>None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>map<sp/>with<sp/>given<sp/>keys,<sp/>initialialized<sp/>to<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classboost_1_1python_1_1std__map__indexing__suite_1a8aedb678ae655adaf30a5f0200fdeda9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a8aedb678ae655adaf30a5f0200fdeda9" kindref="member">dict_fromkeys</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a1d08ce35eb71bc9248f64a515d6d9775" kindref="member">keys</ref>,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>newmap<sp/>=<sp/>object(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::storage_type());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numkeys<sp/>=<sp/>extract&lt;int&gt;(keys.attr(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">)());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;numkeys;i++)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>&apos;cuz<sp/>python<sp/>is<sp/>more<sp/>fun<sp/>in<sp/>C++...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newmap.attr(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(keys.attr(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">)(i),value);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newmap;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spice<sp/>up<sp/>the<sp/>constructors<sp/>a<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PyClassT&gt;</highlight></codeline>
<codeline lineno="207" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory" kindref="compound">init_factory</ref><sp/>{</highlight></codeline>
<codeline lineno="208" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1a785b4c017210dd048b47eb6c04a5cdc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PyClassT::metadata::holder<sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1a785b4c017210dd048b47eb6c04a5cdc6" kindref="member">Holder</ref>;</highlight></codeline>
<codeline lineno="209" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1aea2971d45c2f4de6ac83494b504d9a19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bp::objects::instance&lt;Holder&gt;<sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1aea2971d45c2f4de6ac83494b504d9a19" kindref="member">instance_t</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connect<sp/>the<sp/>PyObject<sp/>to<sp/>a<sp/>wrapped<sp/>C++<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>borrowed<sp/>from<sp/>boost/python/object/make_holder.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1acd1c1789efbbb4f595abae51b1f0a2a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1acd1c1789efbbb4f595abae51b1f0a2a0" kindref="member">make_holder</ref>(PyObject<sp/>*p)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>memory<sp/>=<sp/>Holder::allocate(p,<sp/>offsetof(<ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1aea2971d45c2f4de6ac83494b504d9a19" kindref="member">instance_t</ref>,<sp/>storage),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1a785b4c017210dd048b47eb6c04a5cdc6" kindref="member">Holder</ref>));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>only<sp/>works<sp/>for<sp/>blank<sp/>()<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(memory)<sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1a785b4c017210dd048b47eb6c04a5cdc6" kindref="member">Holder</ref>(p))-&gt;install(p);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Holder::deallocate(p,<sp/>memory);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1aa1f0944f15cb284c240d25bfa6f0ccca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1aa1f0944f15cb284c240d25bfa6f0ccca" kindref="member">from_dict</ref>(PyObject<sp/>*p,<sp/>bp::dict<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>dict)<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1acd1c1789efbbb4f595abae51b1f0a2a0" kindref="member">make_holder</ref>(p);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>newmap<sp/>=<sp/>object(bp::handle&lt;&gt;(borrowed(p)));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newmap.attr(</highlight><highlight class="stringliteral">&quot;update&quot;</highlight><highlight class="normal">)(dict);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1ad0dbf8e2c1b8fa7dd7ecf87415e7d3fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1ad0dbf8e2c1b8fa7dd7ecf87415e7d3fb" kindref="member">from_list</ref>(PyObject<sp/>*p,<sp/>bp::list<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>list)<sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1init__factory_1acd1c1789efbbb4f595abae51b1f0a2a0" kindref="member">make_holder</ref>(p);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>newmap<sp/>=<sp/>object(bp::handle&lt;&gt;(borrowed(p)));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newmap.attr(</highlight><highlight class="stringliteral">&quot;update&quot;</highlight><highlight class="normal">)(bp::dict(list));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>keys<sp/>and<sp/>values<sp/>from<sp/>dictlike<sp/>object<sp/>(anything<sp/>with<sp/>keys())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="classboost_1_1python_1_1std__map__indexing__suite_1a77daf7a1f7b0da0d6035e91dfa118899" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a77daf7a1f7b0da0d6035e91dfa118899" kindref="member">dict_update</ref>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>dictlike)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a1d08ce35eb71bc9248f64a515d6d9775" kindref="member">keys</ref><sp/>=<sp/>dictlike.attr(</highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">)();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numkeys<sp/>=<sp/>extract&lt;int&gt;(keys.attr(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">)());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;numkeys;i++)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>keys.attr(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">)(i);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.attr(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">)(key,dictlike.attr(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">)(key));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>operators<sp/>to<sp/>sample<sp/>the<sp/>key,<sp/>value,<sp/>or<sp/>a<sp/>tuple<sp/>from<sp/>a<sp/>std::pair<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iterkeys" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iterkeys" kindref="compound">iterkeys</ref></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iterkeys_1a7c12b5aeae081d2ecf524e29e5a5c343" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4e2daeb60a58d6ce9964e0ea27680009" kindref="member">key_type</ref><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iterkeys_1a7c12b5aeae081d2ecf524e29e5a5c343" kindref="member">result_type</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iterkeys_1a0e3b853fc4bbcc4777e5c663cc8bdd60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iterkeys_1a7c12b5aeae081d2ecf524e29e5a5c343" kindref="member">result_type</ref><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iterkeys_1a0e3b853fc4bbcc4777e5c663cc8bdd60" kindref="member">operator()</ref>(<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aff9ed68cf30e805a04a313d92c62ab38" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="259"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.first;<sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1itervalues" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1itervalues" kindref="compound">itervalues</ref><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1itervalues_1a7d2f8df7d18009f2bad1363db4f718f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a3e9a6a8b8ba34759cf0ba99fe5966041" kindref="member">data_type</ref><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1itervalues_1a7d2f8df7d18009f2bad1363db4f718f3" kindref="member">result_type</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1itervalues_1a36486ce19f8e08900aabe582d0502dc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1itervalues_1a7d2f8df7d18009f2bad1363db4f718f3" kindref="member">result_type</ref><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1itervalues_1a36486ce19f8e08900aabe582d0502dc8" kindref="member">operator()</ref>(<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aff9ed68cf30e805a04a313d92c62ab38" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.second;<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iteritems" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iteritems" kindref="compound">iteritems</ref><sp/>{</highlight></codeline>
<codeline lineno="275" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iteritems_1a97f1c788acd4c665fba8ae1fcc946a45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>tuple<sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iteritems_1a97f1c788acd4c665fba8ae1fcc946a45" kindref="member">result_type</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iteritems_1a4adb01be48bc47d6c1636957267fdca2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iteritems_1a97f1c788acd4c665fba8ae1fcc946a45" kindref="member">result_type</ref><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1iteritems_1a4adb01be48bc47d6c1636957267fdca2" kindref="member">operator()</ref>(<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1aff9ed68cf30e805a04a313d92c62ab38" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="278"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>boost::python::make_tuple(x.first,x.second);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Transform&gt;</highlight></codeline>
<codeline lineno="284" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl" kindref="compound">make_transform_impl</ref><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1a64d7b60f0e792533c1cc89b84f341b0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::transform_iterator&lt;Transform,<sp/>const_iterator&gt;<sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1a64d7b60f0e792533c1cc89b84f341b0d" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1ab74967f0d94cdc5adcae986110974656" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1a64d7b60f0e792533c1cc89b84f341b0d" kindref="member">iterator</ref><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1ab74967f0d94cdc5adcae986110974656" kindref="member">begin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>m)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::make_transform_iterator(m.begin(),<sp/>Transform());<sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1ac8c3535052a0a3320e73ab5b49eb6b82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1a64d7b60f0e792533c1cc89b84f341b0d" kindref="member">iterator</ref><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1ac8c3535052a0a3320e73ab5b49eb6b82" kindref="member">end</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>m)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::make_transform_iterator(m.end(),<sp/>Transform());<sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1a9dbcd293bf92f94f2eaeaed8edb64ee2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1a9dbcd293bf92f94f2eaeaed8edb64ee2" kindref="member">range</ref>()</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::range(&amp;<ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1ab74967f0d94cdc5adcae986110974656" kindref="member">begin</ref>,<sp/>&amp;<ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1ac8c3535052a0a3320e73ab5b49eb6b82" kindref="member">end</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Transform&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/></highlight></codeline>
<codeline lineno="305" refid="classboost_1_1python_1_1std__map__indexing__suite_1ad2e6c20740dd4ad7058f04e958fc499c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1ad2e6c20740dd4ad7058f04e958fc499c" kindref="member">make_transform</ref>()</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structboost_1_1python_1_1std__map__indexing__suite_1_1make__transform__impl_1a9dbcd293bf92f94f2eaeaed8edb64ee2" kindref="member">make_transform_impl&lt;Transform&gt;::range</ref>();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="classboost_1_1python_1_1std__map__indexing__suite_1a1147c134bf910497fb9a467a21522933" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a1147c134bf910497fb9a467a21522933" kindref="member">print_elem</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>e)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(%s,<sp/>%s)&quot;</highlight><highlight class="normal"><sp/>%<sp/>python::make_tuple(e.first,<sp/>e.second);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>mpl::if_&lt;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_class&lt;data_type&gt;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a3e9a6a8b8ba34759cf0ba99fe5966041" kindref="member">data_type</ref>&amp;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a3e9a6a8b8ba34759cf0ba99fe5966041" kindref="member">data_type</ref></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="322" refid="classboost_1_1python_1_1std__map__indexing__suite_1a7c13569acfb66f1adb8d92c581091654" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a7c13569acfb66f1adb8d92c581091654" kindref="member">get_data</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type&amp;<sp/>e)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.second;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::key_type</highlight></codeline>
<codeline lineno="328" refid="classboost_1_1python_1_1std__map__indexing__suite_1a28a13c6039a1305e3605c6ca3a9803d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a28a13c6039a1305e3605c6ca3a9803d9" kindref="member">get_key</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type&amp;<sp/>e)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.first;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a3e9a6a8b8ba34759cf0ba99fe5966041" kindref="member">data_type</ref>&amp;</highlight></codeline>
<codeline lineno="334" refid="classboost_1_1python_1_1std__map__indexing__suite_1a8650d42e8d1d7e095f6cfc9e664f0fab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a8650d42e8d1d7e095f6cfc9e664f0fab" kindref="member">get_item</ref>(Container&amp;<sp/>container,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref><sp/>i_)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::iterator<sp/>i<sp/>=<sp/>container.find(i_);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>container.end())</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_KeyError,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>key&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_error_already_set();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i-&gt;second;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classboost_1_1python_1_1std__map__indexing__suite_1a5dc3dd492671db19152e7c64b62e9f97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a5dc3dd492671db19152e7c64b62e9f97" kindref="member">set_item</ref>(Container&amp;<sp/>container,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref><sp/>i,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a3e9a6a8b8ba34759cf0ba99fe5966041" kindref="member">data_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container[i]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="classboost_1_1python_1_1std__map__indexing__suite_1a9af154020b49d26a30de90bfb07b122d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a9af154020b49d26a30de90bfb07b122d" kindref="member">delete_item</ref>(Container&amp;<sp/>container,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref><sp/>i)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container.erase(i);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="classboost_1_1python_1_1std__map__indexing__suite_1a2a7b98e15824d0e74ae4620cbfa636d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a2a7b98e15824d0e74ae4620cbfa636d0" kindref="member">size</ref>(Container&amp;<sp/>container)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container.size();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="classboost_1_1python_1_1std__map__indexing__suite_1a89557475c8931027399dddf66fb251c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a89557475c8931027399dddf66fb251c1" kindref="member">contains</ref>(Container&amp;<sp/>container,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4e2daeb60a58d6ce9964e0ea27680009" kindref="member">key_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container.find(key)<sp/>!=<sp/>container.end();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="classboost_1_1python_1_1std__map__indexing__suite_1a62974da613b1b56663d9736a8612bddd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a62974da613b1b56663d9736a8612bddd" kindref="member">compare_index</ref>(Container&amp;<sp/>container,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref><sp/>a,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref><sp/>b)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container.key_comp()(a,<sp/>b);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref></highlight></codeline>
<codeline lineno="376" refid="classboost_1_1python_1_1std__map__indexing__suite_1a79bc222baa6b652f2f688f2a3add9d75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a79bc222baa6b652f2f688f2a3add9d75" kindref="member">convert_index</ref>(Container&amp;<sp/>container,<sp/>PyObject*<sp/>i_)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extract&lt;key_type<sp/>const&amp;&gt;<sp/>i(i_);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i.check())</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extract&lt;key_type&gt;<sp/>i(i_);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i.check())</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_error_already_set();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a4b2ac75883fba93dbca6d9e83197c842" kindref="member">index_type</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Class&gt;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="classboost_1_1python_1_1std__map__indexing__suite_1a32aecfee63f8763608a0149050134623" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a32aecfee63f8763608a0149050134623" kindref="member">extension_def</ref>(Class&amp;<sp/>cl)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Wrap<sp/>the<sp/>map&apos;s<sp/>element<sp/>(value_type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>elem_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std_map_indexing_suite_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cl_name;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>class_name(cl.attr(</highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extract&lt;std::string&gt;<sp/>class_name_extractor(class_name);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl_name<sp/>=<sp/>class_name_extractor();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem_name<sp/>+=<sp/>cl_name;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_entry&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>mpl::if_&lt;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_class&lt;data_type&gt;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>return_internal_reference&lt;&gt;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>default_call_policies</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type<sp/>get_data_return_policy;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_&lt;value_type&gt;(elem_name.c_str())</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">,<sp/>&amp;DerivedPolicies::print_elem)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>&amp;DerivedPolicies::get_data,<sp/>get_data_return_policy(),</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K.data()<sp/>-&gt;<sp/>the<sp/>value<sp/>associated<sp/>with<sp/>this<sp/>pair.\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>&amp;DerivedPolicies::get_key,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K.key()<sp/>-&gt;<sp/>the<sp/>key<sp/>associated<sp/>with<sp/>this<sp/>pair.\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a802d62d636e685954b7abe3331de7af6" kindref="member">pair_getitem</ref>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a09b84169bb3b2ceb9c576c41cd63280e" kindref="member">pair_iter</ref>)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a639bbbf3265c0cab8419b106590c3857" kindref="member">pair_len</ref>)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,&amp;DerivedPolicies::get_key,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K.first()<sp/>-&gt;<sp/>the<sp/>first<sp/>item<sp/>in<sp/>this<sp/>pair.\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">,&amp;DerivedPolicies::get_data,<sp/>get_data_return_policy(),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K.second()<sp/>-&gt;<sp/>the<sp/>second<sp/>item<sp/>in<sp/>this<sp/>pair.\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>convenience<sp/>methods<sp/>to<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>declare<sp/>constructors<sp/>in<sp/>descending<sp/>order<sp/>of<sp/>arity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>init_factory&lt;Class&gt;::from_list,<sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Initialize<sp/>with<sp/>keys<sp/>and<sp/>values<sp/>from<sp/>a<sp/>Python<sp/>dictionary:<sp/>{&apos;key&apos;:&apos;value&apos;}\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>init_factory&lt;Class&gt;::from_dict,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Initialize<sp/>with<sp/>keys<sp/>and<sp/>values<sp/>as<sp/>tuples<sp/>in<sp/>a<sp/>Python<sp/>list:<sp/>[(&apos;key&apos;,&apos;value&apos;)]\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(init&lt;&gt;())<sp/></highlight><highlight class="comment">//<sp/>restore<sp/>default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a1d08ce35eb71bc9248f64a515d6d9775" kindref="member">keys</ref>,<sp/></highlight><highlight class="stringliteral">&quot;D.keys()<sp/>-&gt;<sp/>list<sp/>of<sp/>D&apos;s<sp/>keys\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;has_key&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a89557475c8931027399dddf66fb251c1" kindref="member">contains</ref>,<sp/></highlight><highlight class="stringliteral">&quot;D.has_key(k)<sp/>-&gt;<sp/>True<sp/>if<sp/>D<sp/>has<sp/>a<sp/>key<sp/>k,<sp/>else<sp/>False\n&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>re-invent<sp/>the<sp/>wheel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;values&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a81c04a5902c3ea0b559b56ab66e600a9" kindref="member">values</ref>,<sp/></highlight><highlight class="stringliteral">&quot;D.values()<sp/>-&gt;<sp/>list<sp/>of<sp/>D&apos;s<sp/>values\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;items&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a6e44b3f64f0723b75c7e00b8d46bab92" kindref="member">items</ref>,<sp/></highlight><highlight class="stringliteral">&quot;D.items()<sp/>-&gt;<sp/>list<sp/>of<sp/>D&apos;s<sp/>(key,<sp/>value)<sp/>pairs,<sp/>as<sp/>2-tuples\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;Container::clear,<sp/></highlight><highlight class="stringliteral">&quot;D.clear()<sp/>-&gt;<sp/>None.<sp/><sp/>Remove<sp/>all<sp/>items<sp/>from<sp/>D.\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//.def(&quot;copy&quot;,<sp/>&amp;copy,<sp/>&quot;D.copy()<sp/>-&gt;<sp/>a<sp/>shallow<sp/>copy<sp/>of<sp/>D\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">,<sp/><ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a6012daef85763e30ed55ef753933ff1b" kindref="member">dict_get</ref>,<sp/>dict_get_overloads(args(</highlight><highlight class="stringliteral">&quot;default_val&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D.get(k[,d])<sp/>-&gt;<sp/>D[k]<sp/>if<sp/>k<sp/>in<sp/>D,<sp/>else<sp/>d.<sp/><sp/>d<sp/>defaults<sp/>to<sp/>None.\n&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a56d69ee32c136ed83389eefae5f8df3a" kindref="member">dict_pop</ref><sp/>)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a923cb4bd1266dd53065eba4d3c91279a" kindref="member">dict_pop_default</ref>,<sp/></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D.pop(k[,d])<sp/>-&gt;<sp/>v,<sp/>remove<sp/>specified<sp/>key<sp/>and<sp/>return<sp/>the<sp/>corresponding<sp/>value\nIf<sp/>key<sp/>is<sp/>not<sp/>found,<sp/>d<sp/>is<sp/>returned<sp/>if<sp/>given,<sp/>otherwise<sp/>KeyError<sp/>is<sp/>raised\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;popitem&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1af207a28bb4d4a7fa8364139dd0484a84" kindref="member">dict_pop_item</ref>,<sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D.popitem()<sp/>-&gt;<sp/>(k,<sp/>v),<sp/>remove<sp/>and<sp/>return<sp/>some<sp/>(key,<sp/>value)<sp/>pair<sp/>as<sp/>a\n2-tuple;<sp/>but<sp/>raise<sp/>KeyError<sp/>if<sp/>D<sp/>is<sp/>empty\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;fromkeys&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a8aedb678ae655adaf30a5f0200fdeda9" kindref="member">dict_fromkeys</ref>,<sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cl_name+</highlight><highlight class="stringliteral">&quot;.fromkeys(S,v)<sp/>-&gt;<sp/>New<sp/>&quot;</highlight><highlight class="normal">+cl_name+</highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>keys<sp/>from<sp/>S<sp/>and<sp/>values<sp/>equal<sp/>to<sp/>v.\n&quot;</highlight><highlight class="normal">).c_str())</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.staticmethod(</highlight><highlight class="stringliteral">&quot;fromkeys&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;update&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="classboost_1_1python_1_1std__map__indexing__suite_1a77daf7a1f7b0da0d6035e91dfa118899" kindref="member">dict_update</ref>,<sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D.update(E)<sp/>-&gt;<sp/>None.<sp/><sp/>Update<sp/>D<sp/>from<sp/>E:<sp/>for<sp/>k<sp/>in<sp/>E:<sp/>D[k]<sp/>=<sp/>E[k]\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;iteritems&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_transform&lt;iteritems&gt;(),</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D.iteritems()<sp/>-&gt;<sp/>an<sp/>iterator<sp/>over<sp/>the<sp/>(key,<sp/>value)<sp/>items<sp/>of<sp/>D\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;iterkeys&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_transform&lt;iterkeys&gt;(),</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D.iterkeys()<sp/>-&gt;<sp/>an<sp/>iterator<sp/>over<sp/>the<sp/>keys<sp/>of<sp/>D\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;itervalues&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_transform&lt;itervalues&gt;(),</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D.itervalues()<sp/>-&gt;<sp/>an<sp/>iterator<sp/>over<sp/>the<sp/>values<sp/>of<sp/>D\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>boost::python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ICETRAY_PYTHON_STD_MAP_INDEXING_SUITE_HPP_INCLUDED</highlight></codeline>
    </programlisting>
    <location file="/home/vrabaud/workspace/recognition_kitchen/src/ecto/include/ecto/python/std_map_indexing_suite.hpp"/>
  </compounddef>
</doxygen>
